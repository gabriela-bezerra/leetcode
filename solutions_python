# def removeDuplicates(nums):
#     """ Remove duplicates from sorted array in place. """

#     """
#     Input: nums = [0,0,1,1,1,2,2,3,3,4]
#     Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]

#     """

#     # Two pointers approach

#     current = 0

#     for idx in range(len(nums)):
#             if nums[idx] != nums[current]:
#                 current += 1
#                 nums[current] = nums[idx]

#     return current + 1 #last unique index plus one
# time complexity - O(n) because uses a single loop

# def maxProfit(prices):
#     """ Finds best time to buy and sell stock """

#     """
#     Input: prices = [7,1,5,3,6,4]
#     Output: 7

#     Input: prices = [1,2,3,4,5]
#     Output: 4

#     Input: prices = [7,6,4,3,1]
#     Output: 0

#     """
#     max_profit = 0

#     for i in range(1,len(prices)):
#         if prices[i] - prices[i-1] > 0:
#             max_profit += prices[i] - prices[i -1]

# #     return max_profit
# time complexity - O(n)

# class Solution:
#     def rotate(self, nums: List[int], k: int) -> None:
#         """
#         Do not return anything, modify nums in-place instead.
#         """
#         k = k % len(nums)

#         nums[:] = nums[-k:] + nums[:-k]
# time complexity - O(n)


# class Solution:
#     def containsDuplicate(self, nums: List[int]) -> bool:

#         seen = set()

#         for n in nums:
#             if n in seen:
#                 return True
#             seen.add(n)
#         return False
# time complexity - O(n)


# class Solution:
#     def singleNumber(self, nums: List[int]) -> int:
#         counts = {}

#         for num in nums:
#             if num in counts:
#               counts[num] += 1
#             else:
#               counts[num] = 1

#         for num, count in counts.items():
#             if count == 1:
#               return num
# time complexity - O(n)


def intersect(nums1, nums2):

    count1 = {}
    result = []

    if len(nums1) < len(nums2):
        nums1, nums2 = nums2, nums1

    for n in nums1:
        if n in count1:
            count1[n] += 1
        else:
            count1[n] = 1

    for n in nums2:
        if n in count1 and count1[n]:
            count1[n] -= 1
            result.append(n)
    return result


print(intersect([1, 4, 5, 3, 6], [2, 3, 5, 7, 9]))
